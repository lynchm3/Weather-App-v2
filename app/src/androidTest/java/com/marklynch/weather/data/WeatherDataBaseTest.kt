package com.marklynch.weather.data

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import com.marklynch.weather.model.ManualLocation
import com.marklynch.weather.data.manuallocation.ManualLocationDAO
import com.marklynch.weather.di.testWeatherDatabase
import com.marklynch.weather.utils.randomAlphaNumeric
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.cancel
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.koin.standalone.StandAloneContext
import org.koin.standalone.inject
import org.koin.test.KoinTest
import java.io.IOException
import kotlin.random.Random

class WeatherDatabaseTest : KoinTest {
    private val db: WeatherDatabase by inject()
    private lateinit var manualLocationDAO: ManualLocationDAO

    @get:Rule
    val rule = InstantTaskExecutorRule()

    @Before
    fun setup() {
        val moduleList =
            testWeatherDatabase

        StandAloneContext.loadKoinModules(moduleList)
        manualLocationDAO = db.getManualLocationDao()
        db.clearAllTables()
    }

    @After
    @Throws(IOException::class)
    fun after() {
        db.close()
        GlobalScope.cancel()
        StandAloneContext.stopKoin()
    }

    private fun insertAndCheckLocation(): ManualLocation {
        val displayName = randomAlphaNumeric(5)
        val lat = Random.nextDouble()
        val lon = Random.nextDouble()

        val toInsertInDB =
            ManualLocation(0, displayName, lat, lon)
        val autoGeneratedId = manualLocationDAO.insert(toInsertInDB)
        val expected = ManualLocation(
            autoGeneratedId,
            displayName,
            lat,
            lon
        )
        val actual = manualLocationDAO.getManualLocationById(autoGeneratedId)

        assertEquals(expected, actual)

        return actual
    }

    @Test
    fun testInsertAndGetManualLocationById() {
        insertAndCheckLocation()
    }

    @Test
    fun testInsertUpdateAndGetManualLocationById() {

        //Insert
        val insertedManualLocation = insertAndCheckLocation()

        //Update
        val updateDisplayName = randomAlphaNumeric(5)
        val updateLat = Random.nextDouble()
        val updateLon = Random.nextDouble()

        val toUpdateInDB = ManualLocation(
            insertedManualLocation.id,
            updateDisplayName,
            updateLat,
            updateLon
        )
        manualLocationDAO.update(toUpdateInDB)
        val expected2 = ManualLocation(
            insertedManualLocation.id,
            updateDisplayName,
            updateLat,
            updateLon
        )
        val actual2 = manualLocationDAO.getManualLocationById(insertedManualLocation.id)

        assertEquals(expected2, actual2)
    }

    @Test
    fun testInsertDeleteAndGetManualLocationById() {

        //Insert
        val insertedManualLocation = insertAndCheckLocation()

        //Delete
        manualLocationDAO.delete(insertedManualLocation)
        val actual2 = manualLocationDAO.getManualLocationById(insertedManualLocation.id)
        assertEquals(null, actual2)
    }

    @Test
    fun testInsertAndSelectAllManualLocationById() {

        //Select all
        val manualLocationsLiveData = manualLocationDAO.getManualLocationLiveData()

        //Insert
        val insertedManualLocation = insertAndCheckLocation()

        var observations = 0
        manualLocationsLiveData.observeForever {
            observations++
            assertEquals(insertedManualLocation, it[0])
        }

        assertEquals(1, observations)
    }
}